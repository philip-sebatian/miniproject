// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id                   Int          @id @default(autoincrement())
    userName             String
    password             String
    comments             Comment[]    @relation("UserComments")
    likes                Like[]       @relation("UserLikes")
    friendshipsSent      Friendship[] @relation("UserSentFriends")
    friendshipsReceived  Friendship[] @relation("UserReceivedFriends")
    messagesSent         Message[]    @relation("UserMessagesSent")
    messagesReceived      Message[]   @relation("UserMessagesReceived")
}

model Post {
    id       Int      @id @default(autoincrement())
    username String
    avatar   String
    image    String
    likes    Int      @default(0)
    caption  String
    postLikes Like[]  @relation("PostLikes")
}

model Comment {
    id       Int    @id @default(autoincrement())
    post_id  Int
    comment  String
    owner_id Int
    user     User   @relation("UserComments", fields: [owner_id], references: [id])
}

model Like {
    id      Int    @id @default(autoincrement())
    user_id Int
    post_id Int

    user    User   @relation("UserLikes", fields: [user_id], references: [id])
    post    Post   @relation("PostLikes", fields: [post_id], references: [id])

    @@unique([user_id, post_id]) // Ensure unique likes per user per post
}

model Friendship {
    id       Int    @id @default(autoincrement())
    user1Id  Int
    user2Id  Int
    user1    User   @relation("UserSentFriends", fields: [user1Id], references: [id])
    user2    User   @relation("UserReceivedFriends", fields: [user2Id], references: [id])

    @@unique([user1Id, user2Id]) // Ensure no duplicate friendships between users
    @@index([user1Id])
    @@index([user2Id])
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String
  createdAt   DateTime @default(now())

  // Relations (if any)
  sender      User     @relation("UserMessagesSent", fields: [senderId], references: [id])
  receiver    User     @relation("UserMessagesReceived", fields: [receiverId], references: [id])
}

